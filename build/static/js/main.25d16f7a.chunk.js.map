{"version":3,"sources":["components/Dialog/styles.ts","components/Dialog/index.tsx","components/TreeChart/index.jsx","hooks/useD3/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","TitleWrapper","Dialog","show","setShow","node","Modal","onHide","Header","Title","name","Body","id","pipeline","origin","description","dois","map","doi","index","WIDTH_IN_PX","DEFAULT_MARGIN_IN_PX","DEFAULT_MARGIN_IN_PX_ARRAY","wrap","text","width","each","word","d3","this","words","split","reverse","line","lineNumber","x","attr","y","tspan","append","pop","push","join","getComputedTextLength","stringToColour","str","i","hash","length","charCodeAt","colour","toString","substr","increaseBrightness","hex","percent","replace","r","parseInt","g","b","TreeChart","data","React","useState","setNode","margins","setMargins","ref","renderGraphFn","dependencies","useRef","useEffect","current","useD3","svg","tree","nodeSize","root","diagonal","x0","y0","descendants","forEach","_children","children","depth","baseLink","baseNode","update","sourceNode","nodes","links","left","right","eachBefore","height","transition","duration","tween","window","ResizeObserver","dispatch","selectAll","nodeEnter","enter","_node","on","_event","viewBox","level","Number","showDetail","parent","grandParent","colorName","hexColor","getNodeColor","style","call","clone","lower","merge","exit","remove","link","target","linkEnter","point","source","userSelect","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25d16f7a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const TitleWrapper = styled.div`\n  width: 460px;\n  overflow-wrap: break-word;\n`;\n","import * as React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { Container, TitleWrapper } from './styles';\n\ntype Node = {\n    id: number;\n    name: string;\n    description: string;\n    pipeline: string;\n    dois?: string[];\n    origin: string;\n    level: number;\n};\n\ntype Props = {\n    show: boolean;\n    setShow: (bool: boolean) => void;\n    node?: Node;\n};\n\nexport const Dialog: React.FC<Props> = ({ show, setShow, node }) => {\n    return (\n        <Modal show={show} onHide={() => setShow(false)}>\n            {node && (\n                <>\n                    <Modal.Header>\n                        <Modal.Title>\n                            <TitleWrapper>{node.name}</TitleWrapper>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <h6>\n                                ID {node.id} â˜† {node.pipeline}\n                            </h6>\n                            <h6>Origin: {node.origin}</h6>\n                            <p>{node.description}</p>\n                            <h6>DOIS</h6>\n                            {node.dois && node.dois.map((doi, index) => <li key={index}>{doi}</li>)}\n                        </Container>\n                    </Modal.Body>\n                </>\n            )}\n        </Modal>\n    );\n};\n","import * as d3 from 'd3';\nimport React from 'react';\n\nimport { useD3 } from '../../hooks/useD3';\nimport { Dialog } from '../Dialog';\n\nconst SVG_HEIGHT_IN_PX = 1400;\nconst WIDTH_IN_PX = 1200;\nconst X_NODE_SIZE = 28;\nconst MAX_DEPTH = 4;\nconst TRANSITION_DURATION = 250;\nconst Y_NODE_SIZE = WIDTH_IN_PX / MAX_DEPTH;\nconst DEFAULT_MARGIN_IN_PX = {\n    top: 10,\n    right: 0,\n    bottom: 10,\n    left: -30,\n};\nconst DEFAULT_MARGIN_IN_PX_ARRAY = [DEFAULT_MARGIN_IN_PX.left, -DEFAULT_MARGIN_IN_PX.top, WIDTH_IN_PX, X_NODE_SIZE];\n\n// https://stackoverflow.com/questions/24784302/wrapping-text-in-d3/24785497\nconst wrap = (text, width) => {\n    text.each(function () {\n        let text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 10, // ems\n            x = text.attr('x'),\n            y = text.attr('y'),\n            tspan = text.text(null).append('tspan').attr('x', x).attr('y', y);\n        while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(' '));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n                line = [word];\n                tspan = text\n                    .append('tspan')\n                    .attr('x', x)\n                    .attr('y', ++lineNumber * lineHeight + y)\n                    .text(word);\n            }\n        }\n    });\n};\n\nconst getNodeColor = (node) => {\n    if (node.data.name === 'Start') return '#262626';\n    else if (!node._children && node.data.level !== 3) return 'gray';\n    else {\n        const parent = node.parent;\n        const grandParent = parent.parent;\n        const colorName =\n            grandParent !== null\n                ? grandParent.data.name === 'Start'\n                    ? parent.data.name\n                    : grandParent.data.name\n                : parent.data.name === 'Start'\n                    ? node.data.name\n                    : parent.data.name;\n        const hexColor = stringToColour(colorName);\n        if (node.data.level === 1) return increaseBrightness(hexColor, 20);\n        else if (node.data.level === 2) return increaseBrightness(hexColor, 40);\n        else if (node.data.level === 3) return increaseBrightness(hexColor, 60);\n        else return 'gray';\n    }\n};\n\nconst stringToColour = (str) => {\n    let i;\n    let hash = 0;\n    for (i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 4) - hash);\n    }\n    let colour = '#';\n    for (i = 0; i < 3; i++) {\n        const value = (hash >> (i * 4)) & 0xff;\n        colour += ('00' + value.toString(26)).substr(-2);\n    }\n    return colour;\n};\n\nconst increaseBrightness = (hex, percent) => {\n    // strip the leading # if it's there\n    hex = hex.replace(/^\\s*#|\\s*$/g, '');\n\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n    if (hex.length === 3) {\n        hex = hex.replace(/(.)/g, '$1$1');\n    }\n\n    var r = parseInt(hex.substr(0, 2), 16),\n        g = parseInt(hex.substr(2, 2), 16),\n        b = parseInt(hex.substr(4, 2), 16);\n\n    return (\n        '#' +\n        (0 | ((1 << 8) + r + ((256 - r) * percent) / 100)).toString(16).substr(1) +\n        (0 | ((1 << 8) + g + ((256 - g) * percent) / 100)).toString(16).substr(1) +\n        (0 | ((1 << 8) + b + ((256 - b) * percent) / 100)).toString(16).substr(1)\n    );\n};\n\nexport const TreeChart = ({ data }) => {\n    const [show, setShow] = React.useState(false);\n    const [node, setNode] = React.useState();\n    const [margins, setMargins] = React.useState(DEFAULT_MARGIN_IN_PX_ARRAY);\n\n    const ref = useD3(\n        (svg) => {\n            const tree = d3.tree().nodeSize([X_NODE_SIZE, Y_NODE_SIZE]);\n            const root = d3.hierarchy(data);\n\n            const diagonal = d3\n                .linkHorizontal()\n                .x((node) => node.y)\n                .y((node) => node.x);\n\n            root.x0 = Y_NODE_SIZE;\n            root.y0 = 0;\n            root.descendants().forEach((node, i) => {\n                node.id = i;\n                node._children = node.children;\n                if (node.depth > 1) node.children = null;\n            });\n\n            const showDetail = (node) => {\n                const viewBox = svg.attr('viewBox').split(',');\n                if (node.data.level === 3) {\n                    setShow(true);\n                    setMargins([Number(viewBox[0]), Number(viewBox[1]), Number(viewBox[2]), Number(viewBox[3])]);\n                    setNode(node.data);\n                }\n            };\n\n            const baseLink = svg\n                .append('g')\n                .attr('fill', 'none')\n                .attr('stroke', 'black')\n                .attr('stroke-opacity', 0.5)\n                .attr('stroke-width', 1.5);\n\n            const baseNode = svg.append('g').attr('cursor', 'pointer').attr('pointer-events', 'all');\n\n            const update = (sourceNode) => {\n                const nodes = root.descendants().reverse();\n                const links = root.links();\n\n                // Compute the new tree layout.\n                tree(root);\n\n                let left = root;\n                let right = root;\n                root.eachBefore((node) => {\n                    if (node.x < left.x) left = node;\n                    if (node.x > right.x) right = node;\n                });\n\n                const height = right.x - left.x + DEFAULT_MARGIN_IN_PX.top + DEFAULT_MARGIN_IN_PX.bottom;\n\n                const transition = svg\n                    .transition()\n                    .duration(TRANSITION_DURATION)\n                    .attr('viewBox', [DEFAULT_MARGIN_IN_PX.left, left.x - DEFAULT_MARGIN_IN_PX.top, WIDTH_IN_PX, height])\n                    .tween('resize', window.ResizeObserver ? null : () => () => svg.dispatch('toggle'));\n\n                // Update nodes.\n                const node = baseNode.selectAll('g').data(nodes, (node) => node.id);\n\n                // Enter any new nodes at the parent's previous position.\n                const nodeEnter = node\n                    .enter()\n                    .append('g')\n                    .attr('transform', (_node) => `translate(${sourceNode.y0},${sourceNode.x0})`)\n                    .attr('fill-opacity', 0)\n                    .attr('stroke-opacity', 0)\n                    .on('click', (_event, node) => {\n                        if (node.depth === 0) return;\n                        node.children = node.children ? null : node._children;\n                        update(node);\n                        showDetail(node);\n                    });\n\n                nodeEnter\n                    .append('rect')\n                    .attr('width', 20)\n                    .attr('height', 15)\n                    .attr('rx', 5)\n                    .attr('ry', 5)\n                    .attr('y', -10)\n                    .attr('fill', (node) => getNodeColor(node));\n\n                nodeEnter\n                    .append('text')\n                    .attr('x', (node) => -2)\n                    .attr('text-anchor', (node) => 'end')\n                    .style('font-size', '12px')\n                    .text((node) => node.data.name)\n                    .call(wrap, 200)\n                    .clone(true)\n                    .lower()\n                    .attr('stroke-linejoin', 'round')\n                    .attr('stroke-width', 2)\n                    .attr('stroke', 'white');\n\n                // Transition nodes to their new position.\n                node\n                    .merge(nodeEnter)\n                    .transition(transition)\n                    .attr('transform', (node) => `translate(${node.y},${node.x})`)\n                    .attr('fill-opacity', 1)\n                    .attr('stroke-opacity', 1);\n\n                // Transition exiting nodes to the parent's new position.\n                node\n                    .exit()\n                    .transition(transition)\n                    .remove()\n                    .attr('transform', (_node) => `translate(${sourceNode.y},${sourceNode.x})`)\n                    .attr('fill-opacity', 0)\n                    .attr('stroke-opacity', 0);\n\n                // Add the link between the nodes\n                const link = baseLink.selectAll('path').data(links, (node) => node.target.id);\n\n                // Enter any new links at the parent's previous position.\n                const linkEnter = link\n                    .enter()\n                    .append('path')\n                    .attr('d', (_node) => {\n                        const point = { x: sourceNode.x0, y: sourceNode.y0 - 30 };\n                        return diagonal({ source: point, target: point });\n                    });\n\n                // Transition links to their new position.\n                link.merge(linkEnter).transition(transition).attr('d', diagonal);\n\n                // Transition exiting nodes to the parent's new position.\n                link\n                    .exit()\n                    .transition(transition)\n                    .remove()\n                    .attr('d', (_node) => {\n                        const point = { x: sourceNode.x, y: sourceNode.y };\n                        return diagonal({ source: point, target: point });\n                    });\n\n                // Stash the old positions for transition.\n                root.eachBefore((node) => {\n                    node.x0 = node.x;\n                    node.y0 = node.y;\n                });\n            };\n\n            update(root);\n        },\n        [data.length],\n    );\n\n    return (\n        <>\n            <Dialog show={show} node={node} setShow={setShow} />\n            <div style={{ height: '100%', width: WIDTH_IN_PX }}>\n                <svg\n                    ref={ref}\n                    viewBox={[margins]}\n                    style={{\n                        // height: svgHeight,\n                        height: SVG_HEIGHT_IN_PX,\n                        width: '100%',\n                        userSelect: 'none',\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderGraphFn: (selection: d3.Selection<d3.BaseType, unknown, HTMLElement, any>) => void, dependencies: React.DependencyList) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderGraphFn(d3.select(ref.current!));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import React from \"react\";\nimport {TreeChart} from './components/TreeChart';\nimport data from './data/data.json';\nimport './App.css';\nimport {Dialog} from \"./components/Dialog\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TreeChart data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}